CSS
CSS is responsible for styling
with CSS we can not find element by text
Syntax : [Attribute='Value']
when id's last character is dynamic we can try to find element with xpath like below
//input[starts-with(@id,'u_0_') and @name='firstname']
or with CSS like below
input[name='firstname']
To build css selector you can use tag name, attribute, parent-child relationship, you can use position.
If we compare it with Xpath, css selector is faster and more readable.
It doesn't starts with // or / , id doesn't have @.
Basic syntax:
tagname[attribute='value']
CSS selector (locator) can not find element by text
[id='disappearing_button'] or #disappearing_button
# means id
. means class
<h3 class="h3">Multiple buttons</h3>
h3[class='h3'] or .h3
if you use .h3 for css selector, it means find me element with class name h3.
below index of element
.btn.btn-primary:nth-of-type(5) or
 [class='btn btn-primary']:nth-of-type(5) to find fifth element with class btn btn-primary in css
in Xpath like below
//button[@class='btn btn-primary'][5]
^ caret sign - means starts-with
 -means find me element, that has id that starts with button_
below is Ends-with and multiple attribute
 "[id$='_button'][onclick='button4()'] - in this case, we specified 2 attributes
 $ - means ends with.
 [onclick*='5'] - means find me element that contains 5 in attribute onclick
 * - stands for "contains".
 [attribute*='value'] - means attribute contains value 'value'
 If in xpath / means direct child, in css we use >.
 From parent to child below
 html> body> div > div:nth-of-type(2)> div > div:nth-of-type(1)>p. in css
 throw new SkipException  will skip test. If you put before something, you will get:
 unreachable statement!
 @Ignore - will ignore test
 enabled = false - to disable test
 dependsOnMethods = {"button1Test"} - will indicate methods that affects on current test. If those methods fail, it will ignore method with dependency.
dependsOnMethods - it can be useful when method is dependent on method pre-condition. We can also specify priority.nSo method with lower priority will be running first.
  @Test (priority = 2, dependsOnMethods = {"button1Test", "setup"})  - we can specify multiple dependencies for dependsonMethods parameter. That means test can be dependent on multiple methods at the same time.
  If setup method fails, anyway you can run test. If test has a dependency, method that it depend on, must run before anyways. Regardless of priority.
  Priority will be ignored in this case.